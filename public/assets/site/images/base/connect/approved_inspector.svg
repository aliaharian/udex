<svg xmlns="http://www.w3.org/2000/svg" width="33" height="40" fill="none"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><g clip-path="url(#a)" fill="#ED7B00"><path fill-rule="evenodd" clip-rule="evenodd" d="m32.072 10.059.016.363c.196 4.75.163 9.774-1.21 14.372-1.179 4.019-3.568 7.429-6.84 10.23-2.454 2.132-6.086 4.537-9.588 3.471-3.894-1.156-7.1-4.049-9.49-7.063C2.115 27.869.97 23.514.577 19.16c-.23-2.466-.23-4.902-.197-7.37.006-.233-.005-.504-.017-.794-.047-1.11-.106-2.493.802-3.072 1.396-.873 3.032-1.553 4.629-2.216.686-.285 1.365-.567 2.014-.86a699.53 699.53 0 0 1 4.843-2.192c.269-.121.548-.263.836-.409.937-.474 1.958-.991 2.96-.991.229 0 .392.03.523.121 3.501 1.523 6.937 3.106 10.373 4.69l3.534 1.644c1.122.522 1.152 1.267 1.195 2.347zm-8.82 23.169c2.03-1.858 3.796-3.989 4.876-6.455 2.356-5.298 2.422-11.723 1.898-17.417-4.548-2.131-9.13-4.263-13.743-6.272-.767.062-1.766.602-2.635 1.071-.392.212-.758.41-1.063.542-1.086.485-2.172.984-3.248 1.478-.545.25-1.088.5-1.628.745-.867.411-1.742.815-2.617 1.218-.876.403-1.751.807-2.618 1.218-.524 5.694-.458 12.119 1.93 17.417 1.08 2.466 2.847 4.598 4.876 6.455 1.702 1.553 4.45 3.745 7.003 3.745 2.552 0 5.268-2.192 6.97-3.745z"/><path d="M23.776 14.197a886.97 886.97 0 0 1-11.977 9.592c-.982-1.614-1.93-3.258-2.912-4.872-.622-1.035-2.324-.122-1.702.913 1.146 1.95 2.324 3.898 3.469 5.816.327.548 1.08.548 1.538.183 4.352-3.41 8.671-6.882 12.958-10.353.949-.761-.425-2.04-1.374-1.279z"/></g><defs><clipPath id="a"><path fill="#ED7B00" d="M0 0h32.5v40H0z"/></clipPath></defs></svg>