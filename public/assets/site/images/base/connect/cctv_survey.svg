<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 38 38"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><path d="M35.884 6.681c.29 0 .494.123.639.306a.879.879 0 0 1 .232.612v9.236c0 .49-.406.918-.871.918-1.974.03-3.92.03-5.864.03-.26 0-.522-.007-.786-.013-.536-.014-1.08-.028-1.624.013-1.91.153-1.827 2.364-1.762 4.07.013.343.025.665.02.946-.058 5.046-1.713 9.97-6.3 12.295-4.326 2.201-10.19 1.773-13.993-1.438-4.123-3.517-4.413-9.787-4.442-14.955-.026-5.019.133-10.061.29-15.085l.058-1.828c.03-.49.378-.917.871-.917 1.48 0 2.961-.008 4.442-.016C8.274.848 9.755.84 11.236.84c.464 0 .87.428.87.917 0 5.17-.028 10.338-.086 15.445l-.087 3.603v.006c-.008.17-.02.346-.03.526v.001c-.07 1.107-.146 2.349.378 3.296.494.917 1.684 1.284 2.41.459.336-.381.396-1.005.446-1.525l.018-.188c.058-.714.065-1.427.071-2.14.003-.358.007-.714.016-1.071.087-3.915.436-8.044 3.107-11.04 2.234-2.47 5.082-2.46 8.064-2.449h.001l.586.001zm-.87 9.267V8.547c-.581 0-1.162 0-1.743-.03 0 1.238.008 2.477.015 3.715.007 1.239.014 2.478.014 3.716zM6.75 4.22a569.22 569.22 0 0 1 3.614-.015v-1.53c-1.19 0-2.388.008-3.586.015-1.197.008-2.395.016-3.585.016-.015.26-.022.512-.029.764-.007.252-.015.505-.03.765 1.206 0 2.41-.008 3.615-.016zm3.527 12.25c.058-3.487.087-6.943.087-10.43-1.22 0-2.432.008-3.644.015-1.212.008-2.424.016-3.643.016-.145 4.281-.261 8.563-.203 12.845 1.204 0 2.417-.008 3.629-.015 1.212-.008 2.424-.016 3.629-.016.018-.295.04-.583.06-.86.045-.585.085-1.12.085-1.556zm-7.316 5.504c1.176 0 2.359-.008 3.542-.015 1.183-.008 2.366-.015 3.542-.015V20.72c-1.19 0-2.381.008-3.571.015-1.19.008-2.381.016-3.571.016 0 .397.029.826.058 1.223zm21.164-1.07c0-2.141.552-4.435 2.845-4.863 1.056-.182 2.207-.127 3.324-.075.388.018.772.036 1.147.044h.116c0-1.238-.007-2.477-.014-3.716-.007-1.238-.015-2.477-.015-3.715h-6.503c-2.206 0-4.035.275-5.574 2.08-1.597 1.834-2.148 4.373-2.352 6.789-.039.526-.028 1.225-.015 2.01.052 3.319.13 8.175-3.44 8.052-2.177-.092-3.077-1.682-3.425-3.731-1.19 0-2.374.007-3.557.015-1.183.008-2.366.015-3.556.015.493 4.22 1.887 8.258 6.039 9.97 4.848 2.019 11.206.581 13.76-4.496 1.23-2.418 1.226-5.188 1.22-7.877v-.502z" fill="#ff6400"/></svg>