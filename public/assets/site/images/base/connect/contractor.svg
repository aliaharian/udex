<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 42 36"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><path d="M11.462 6.132c0 1.324-1.118 2.402-2.491 2.402S6.48 7.456 6.48 6.132 7.598 3.73 8.971 3.73s2.491 1.078 2.491 2.402zm-1.916 0a.563.563 0 0 0-.575-.554.563.563 0 0 0-.575.554c0 .308.255.554.575.554a.563.563 0 0 0 .575-.554z" fill="#ff6400"/><path d="M30.814 6.775h9.23c.543 0 .99.308.99.832 0 .523-.415.923-.958.923h-9.23v2.464c0 .893-.734 1.601-1.66 1.601h-1.533v1.632c0 .493-.224.955-.639 1.263-.415.277-.926.37-1.437.246l-.128-.03c-.638-.185-1.852-.524-2.714-.585-1.342-.124-3.897-.154-5.94.677-.192.832 0 1.447.223 2.125.128.37.256.74.287 1.14a1.662 1.662 0 0 1-1.437 1.816h-2.523c-.191 1.417-.063 2.772.448 3.726.415.801 1.053 1.294 1.916 1.479 1.692.339 3.13.339 4.28.308h.195c1.207-.002 2.075-.003 2.742.523l.016.014c.387.341 1.1.968.91 7.47-.032.893-.766 1.601-1.692 1.601H1.785C.89 36 .124 35.323.092 34.46l-.003-.07c-.032-.742-.312-7.191.322-10.308.511-2.494 1.565-4.68 2.364-6.282.383-.74.83-1.663.894-2.033-.256-.154-.926-.338-1.31-.43-1.022-.247-2.075-.524-2.203-1.51C.06 13.181.22 6.775.379 1.54.411.678 1.114 0 2.01 0h23.983c.894 0 1.629.708 1.629 1.57v.986h1.533c.926 0 1.66.708 1.66 1.601zM14.112 18.291a9.787 9.787 0 0 0-.351.862h1.596c-.022-.107-.06-.23-.103-.37l-.056-.184-.037-.115c-.12-.373-.257-.797-.315-1.27a4.346 4.346 0 0 0-.734 1.077zm11.623-4.341-.032-.01V1.878H2.263c-.16 5.912-.256 10.316-.224 11.487.223.092.575.184.83.246l.01.002c1.051.277 2.227.586 2.609 1.568.335.793-.114 1.726-.848 3.252l-.11.228c-.799 1.57-1.757 3.542-2.236 5.851-.51 2.464-.383 7.669-.287 9.732h19.96c.096-3.726-.16-5.39-.32-5.82-.204-.074-.738-.07-1.254-.065l-.374.003h-.237c-1.158.002-2.698.005-4.49-.37-1.437-.277-2.555-1.14-3.225-2.432-1.118-2.064-.99-5.205.287-8.007.83-1.787 3.258-4.681 10.539-4.158.944.061 2.075.331 2.81.545v.01zm1.918-3.11h1.245V4.404h-1.245z" fill="#ff6400"/><path d="M30.814 6.775h9.23c.543 0 .99.308.99.832 0 .523-.415.923-.958.923h-9.23v2.464c0 .893-.734 1.601-1.66 1.601h-1.533v1.632c0 .493-.224.955-.639 1.263-.415.277-.926.37-1.437.246l-.128-.03c-.638-.185-1.852-.524-2.714-.585-1.342-.124-3.897-.154-5.94.677-.192.832 0 1.447.223 2.125.128.37.256.74.287 1.14a1.662 1.662 0 0 1-1.437 1.816h-2.523c-.191 1.417-.063 2.772.448 3.726.415.801 1.053 1.294 1.916 1.479 1.692.339 3.13.339 4.28.308h.195c1.207-.002 2.075-.003 2.742.523l.016.014c.387.341 1.1.968.91 7.47-.032.893-.766 1.601-1.692 1.601H1.785C.89 36 .124 35.323.092 34.46l-.003-.07c-.032-.742-.312-7.191.322-10.308.511-2.494 1.565-4.68 2.364-6.282.383-.74.83-1.663.894-2.033-.256-.154-.926-.338-1.31-.43-1.022-.247-2.075-.524-2.203-1.51C.06 13.181.22 6.775.379 1.54.411.678 1.114 0 2.01 0h23.983c.894 0 1.629.708 1.629 1.57v.986h1.533c.926 0 1.66.708 1.66 1.601zM14.112 18.291a9.787 9.787 0 0 0-.351.862h1.596c-.022-.107-.06-.23-.103-.37l-.056-.184-.037-.115c-.12-.373-.257-.797-.315-1.27a4.346 4.346 0 0 0-.734 1.077zm11.623-4.341-.032-.01V1.878H2.263c-.16 5.912-.256 10.316-.224 11.487.223.092.575.184.83.246l.01.002c1.051.277 2.227.586 2.609 1.568.335.793-.114 1.726-.848 3.252l-.11.228c-.799 1.57-1.757 3.542-2.236 5.851-.51 2.464-.383 7.669-.287 9.732h19.96c.096-3.726-.16-5.39-.32-5.82-.204-.074-.738-.07-1.254-.065l-.374.003h-.237c-1.158.002-2.698.005-4.49-.37-1.437-.277-2.555-1.14-3.225-2.432-1.118-2.064-.99-5.205.287-8.007.83-1.787 3.258-4.681 10.539-4.158.944.061 2.075.331 2.81.545v.01zm1.918-3.11h1.245V4.404h-1.245z" fill="#ff6400"/><path d="M11.462 6.132c0 1.324-1.118 2.402-2.491 2.402S6.48 7.456 6.48 6.132 7.598 3.73 8.971 3.73s2.491 1.078 2.491 2.402zm-1.916 0a.563.563 0 0 0-.575-.554.563.563 0 0 0-.575.554c0 .308.255.554.575.554a.563.563 0 0 0 .575-.554z" fill="#ff6400"/></svg>