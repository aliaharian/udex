<svg xmlns="http://www.w3.org/2000/svg" width="21" height="21" fill="none"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><path fill-rule="evenodd" clip-rule="evenodd" d="M18.136 17.931c-.907-2.04-1.846-4.064-2.785-6.087.47-.438.89-.923 1.23-1.474 1.49-2.574 1.166-5.748-.809-7.982C13.894.267 10.818-.397 8.146.509c-2.785.94-4.841 3.595-4.744 6.574.065 1.862.939 3.562 2.267 4.793a258.26 258.26 0 00-2.77 6.072c-.161.356.114.841.551.712l1.417-.413 1.417-.413c.17.413.336.826.502 1.239.166.413.332.826.502 1.238.194.47.745.454.939 0 .76-1.813 1.522-3.626 2.267-5.456.008 0 .02.004.032.008a.124.124 0 00.033.008 201.58 201.58 0 011.65 3.972l.6 1.468c.194.454.745.47.94 0 .17-.412.335-.825.501-1.238.166-.413.332-.826.502-1.239.47.138.943.276 1.417.413.473.138.947.275 1.416.413.454.13.713-.356.551-.729zM4.454 7.876c-1.02-5.343 5.959-8.824 9.942-5.472 2.218 1.862 2.8 4.987 1.344 7.48-1.328 2.121-3.821 3.27-6.315 2.818-2.429-.438-4.501-2.348-4.97-4.825zm2.575 9.23l.728 1.797c.178-.43.358-.858.537-1.287.537-1.288 1.074-2.575 1.584-3.862a6.797 6.797 0 01-1.748-.388 7.917 7.917 0 01-1.684-.875l-.548 1.187a455.267 455.267 0 00-1.719 3.751c.316-.093.628-.185.94-.275.439-.129.875-.256 1.31-.388.276-.081.503.097.6.34zm6.614.89l-.364.89a203.452 203.452 0 00-2.154-5.148 7.2 7.2 0 003.449-1.263l.547 1.186v.001h.001c.578 1.25 1.153 2.496 1.719 3.751-.745-.21-1.49-.42-2.235-.664-.275-.064-.502.114-.599.357-.12.297-.242.593-.364.89zM8.842 7.865c.105.205.21.41.388.733 1.12-.933 1.9-1.62 2.881-2.484.21-.185.431-.38.666-.585.47-.405 1.166.275.68.68A266.26 266.26 0 019.44 9.658c-.226.194-.599.194-.76-.097L7.61 7.618c-.307-.55.535-1.037.843-.486.178.324.283.528.388.733z" fill="#000"/></svg>