<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><path fill-rule="evenodd" clip-rule="evenodd" d="M19.19 14.426c.293 0 .457.229.49.49.089.942.094 1.877.099 2.82.002.428.004.858.015 1.29.016.262-.229.49-.49.49l-1.33.02c-.871.015-1.736.03-2.601.03a.502.502 0 01-.49-.49c0-.588 0-1.191-.016-1.778-3.084-.017-6.183.049-9.266.195 0 .245-.004.49-.009.734-.004.245-.008.49-.008.735 0 .26-.228.489-.49.489-.45-.006-.902-.007-1.353-.01a84.031 84.031 0 01-2.708-.039.586.586 0 01-.294-.114.434.434 0 01-.196-.375c0-.637-.004-1.273-.008-1.909-.004-.636-.008-1.273-.008-1.909 0-.277.228-.473.49-.49l.473-.024.473-.024c-.017-3.181-.017-6.346-.017-9.527H.674c-.294 0-.457-.229-.49-.49C.096 3.737.106 2.941.116 2.143c.005-.37.01-.739.004-1.11 0-.261.229-.49.49-.49 1.321 0 2.626 0 3.931.017.261 0 .49.228.49.49v1.272l4.666-.05h.001l4.664-.048c0-.13.002-.262.004-.394.003-.267.007-.536-.004-.797 0-.261.229-.49.49-.49 1.32 0 2.626 0 3.931.017.261 0 .49.228.49.49-.006.385-.008.771-.01 1.157a61.714 61.714 0 01-.04 2.317.544.544 0 01-.08.245.435.435 0 01-.409.244h-1.256c.082 3.149.147 6.297.212 9.446.253-.008.502-.012.75-.016.25-.004.498-.008.751-.017zm-1.9 1.028c-.482.012-.963.025-1.444.033-.013.77.003 1.542.018 2.312l.014.771c.98 0 1.958-.016 2.937-.032-.012-.38-.015-.757-.019-1.134-.005-.66-.011-1.318-.063-1.982-.481.008-.962.02-1.444.032zM15.35 2.248c.004-.241.006-.483.006-.726.979 0 1.958 0 2.937.017 0 .832 0 1.664-.033 2.512a85.206 85.206 0 00-2.888 0 26.029 26.029 0 01-.021-1.803zm-14.225 0c-.006.6-.013 1.197.022 1.803a85.258 85.258 0 012.887 0c.033-.849.033-1.68.033-2.513-.979-.016-1.958-.016-2.936-.016 0 .243-.003.485-.006.726zm3.497 16.224c-1.028 0-2.056 0-3.1-.033 0-.962 0-1.924-.016-2.887a39.733 39.733 0 012.222-.022c.297.003.595.006.894.006.016.979.016 1.957 0 2.936zm.995-3.442v1.485c3.081-.147 6.165-.213 9.25-.196-.017-.44-.017-.865 0-1.305 0-.147.049-.245.13-.327a.095.095 0 00.014-.017c.005-.009.009-.015.019-.015a.429.429 0 01.326-.13c.229-.009.453-.013.677-.017.226-.003.452-.009.677-.016-.08-3.086-.144-6.188-.208-9.274l-.004-.188h-1.582c-.294 0-.457-.229-.49-.49a12.25 12.25 0 01-.065-1.337l-4.666.049L5.03 3.3c0 .408-.017.816-.033 1.224 0 .098-.016.18-.065.245a.48.48 0 01-.424.244H2.94c.017 3.182.017 6.346.017 9.528l.716.003c.48.004.963.008 1.453-.003.261 0 .49.228.49.489z" fill="#000"/></svg>