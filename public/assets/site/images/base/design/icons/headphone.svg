<svg xmlns="http://www.w3.org/2000/svg" width="21" height="21" fill="none"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><path d="M4.398 15.158a2.863 2.863 0 01-1.758-.584 2.544 2.544 0 01-.818-1.149 3.365 3.365 0 01-.094-.37c0-.028-.01-.053-.014-.08.01.071 0-.02 0-.028 0-.073-.01-.147-.012-.22A2.035 2.035 0 011.799 12a2.68 2.68 0 01.923-1.345 2.874 2.874 0 011.68-.596c.657-.016.659-1.04 0-1.026a3.856 3.856 0 00-3.505 2.447 3.417 3.417 0 00.926 3.733 3.877 3.877 0 002.582.97c.66 0 .66-1.026 0-1.026h-.007z" fill="#000"/><path d="M4.038 15.047c0 .499.013.986.403 1.35.255.225.578.36.917.384.486.023.972.013 1.456-.029a.524.524 0 00.513-.512c0-1.984.036-3.968.02-5.951 0-.501-.022-1.002-.02-1.502a.513.513 0 00-.513-.513c-.31-.012-.617-.025-.926-.032-.432-.01-.854-.014-1.244.229-.702.449-.605 1.257-.61 1.992v2.804c0 .594.01 1.196 0 1.78 0 .661 1.025.661 1.025 0 0-1.273-.012-2.546 0-3.82V9.909v-.297a.78.78 0 010-.11v-.011c0-.09-.015.039.023-.06a.342.342 0 01.032-.053c-.073.12 0-.019.019-.012.019.007.068-.058 0 0s0 0 .02-.012l.105-.056c-.091.05-.035.015.024 0 .058-.016.07-.016.104-.024.106-.03-.132 0 0 0h.32c.358 0 .717.02 1.076.034l-.513-.513c0 2.073.03 4.145.019 6.218 0 .412-.02.823-.019 1.235l.513-.513c-.462.016-.923.024-1.384.036a.312.312 0 00-.055 0c-.061.02.12.028.068.01-.018 0-.039 0-.058-.011-.019-.012-.092-.028-.136-.038-.098-.022.068.038.018 0l-.075-.04c-.037-.018-.094-.083-.013 0-.01-.01-.04-.045-.053-.049-.031-.036-.035-.039-.01 0 .023.04.022.028 0-.012 0-.012-.054-.116-.03-.054.024.061-.015-.074-.015-.072.017.075 0-.014 0-.046v-.395c.02-.677-1.005-.677-1.001-.017zM16.71 9.868a2.857 2.857 0 011.757.583 2.536 2.536 0 01.914 1.527c0 .028.01.055.014.082-.01-.073 0 .018 0 .028 0 .073.012.147.013.22.011.245-.022.49-.097.725a2.68 2.68 0 01-.923 1.346 2.884 2.884 0 01-1.68.595c-.657.017-.66 1.042 0 1.025a3.857 3.857 0 003.507-2.445 3.416 3.416 0 00-.925-3.734 3.877 3.877 0 00-2.581-.968c-.66 0-.662 1.025 0 1.025l.001-.009z" fill="#000"/><path d="M17.07 9.978c0-.498-.013-.986-.402-1.35a1.563 1.563 0 00-.918-.385 11.192 11.192 0 00-1.456.031.513.513 0 00-.512.513c0 1.982-.038 3.965-.02 5.95 0 .501.02 1.002.02 1.502a.523.523 0 00.512.513c.308.01.617.026.926.033.433.01.855.012 1.242-.231.704-.45.607-1.26.61-1.99 0-.935.01-1.88 0-2.806 0-.593-.01-1.186 0-1.78 0-.66-1.025-.66-1.025 0 0 1.273.012 2.547 0 3.82v1.725c0-.027-.008-.078-.008.013 0 .09.015-.04-.022.06a.261.261 0 01-.033.05c.074-.119 0 .021-.02.014-.02-.007-.067.058 0 0 .066-.058 0 0-.02.012l-.107.055c.093-.048.036-.015-.024 0l-.104.026c-.106.027.132 0-.008 0h-.318c-.36 0-.718-.023-1.077-.035l.513.513c0-2.073-.03-4.145-.02-6.22 0-.411.02-.821.02-1.233l-.513.513c.462-.017.923-.026 1.384-.036h.055c.06-.019-.121-.026-.07 0 .019 0 .04 0 .06.01.044.014.09.03.136.04.096.02-.068-.038-.018-.01l.075.04c.025.014.094.084.012 0 .012.012.04.046.055.051.03.036.034.038 0 0-.035-.037-.021-.027 0 .014 0 .012.05.116.028.055-.022-.062.016.073.014.07-.015-.074 0 .013 0 .048v.393c.012.671 1.037.673 1.034.012z" fill="#000"/><path d="M17.674 15.267v1.367c.01.25-.022.5-.096.74a2.019 2.019 0 01-.59.894 2.085 2.085 0 01-1.453.488H12.67c-.66 0-.661 1.025 0 1.025h2.855c.7.023 1.388-.189 1.955-.601a3.059 3.059 0 001.218-2.423v-1.495c0-.66-1.025-.661-1.025 0v.005zM3.426 9.658c0-.905-.01-1.828.145-2.723a6.248 6.248 0 01.949-2.42 7.09 7.09 0 013.283-2.63 8.052 8.052 0 011.07-.327 6.91 6.91 0 011.025-.171 8.245 8.245 0 012.126.085c.377.07.75.164 1.115.282.171.058.357.123.532.193.02.009.114.052.01 0 .051.023.128.046.183.072.099.048.198.111.294.17a7.599 7.599 0 011.891 1.597 6.598 6.598 0 011.367 2.501c.297 1.08.255 2.211.255 3.32 0 .66 1.025.661 1.025 0 0-1.075.022-2.158-.2-3.216a7.199 7.199 0 00-1.225-2.696 8.744 8.744 0 00-2.035-2.026 7.681 7.681 0 00-.82-.511 1.625 1.625 0 00-.216-.097c-.075-.035-.082-.036-.022 0l-.125-.047A8.646 8.646 0 0012.871.62C9.705-.194 6.126.796 4.067 3.406A7.217 7.217 0 002.65 6.321C2.41 7.416 2.4 8.542 2.4 9.66c0 .66 1.026.661 1.026 0v-.002z" fill="#000"/><path d="M12.099 19.406a.977.977 0 01-.067.095l.08-.102a1.082 1.082 0 01-.16.159l.104-.08a1.04 1.04 0 01-.21.122l.123-.05a1.105 1.105 0 01-.255.067l.136-.018c-.081.01-.163.01-.243 0l.137.017a1.068 1.068 0 01-.264-.07l.123.05a.974.974 0 01-.218-.129l.102.08a1.027 1.027 0 01-.17-.17l.08.104a1.007 1.007 0 01-.12-.207l.051.123a.98.98 0 01-.06-.229l.018.137a.916.916 0 010-.217l-.017.136a.927.927 0 01.056-.215l-.051.121c.034-.078.077-.152.13-.22l-.08.104c.047-.058.1-.112.16-.159l-.104.08a.984.984 0 01.21-.12l-.123.05c.082-.033.167-.056.254-.07l-.136.02c.096-.014.194-.014.29 0l-.136-.02c.09.014.178.038.262.072l-.122-.05c.046.023.099.04.148.06l-.123-.05c.046.025.09.054.135.085l-.104-.08c.063.05.12.107.17.17l-.08-.104a.987.987 0 01.132.224L12.106 19c.029.073.05.15.061.227l-.018-.137c.01.078.01.158 0 .236l.018-.135a1.052 1.052 0 01-.058.214l.052-.123a.958.958 0 01-.064.124.512.512 0 10.885.513 1.406 1.406 0 00-.186-1.685 1.474 1.474 0 00-.521-.36l.121.05a1.54 1.54 0 00-1.326 0 1.41 1.41 0 00-.775.939 1.436 1.436 0 00.324 1.271 1.476 1.476 0 002.365-.212.513.513 0 00-.184-.7.523.523 0 00-.701.183z" fill="#000"/></svg>